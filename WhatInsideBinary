On sun solaris
--------------
{
    ls command inspection
    ---------------------
    {
        % /usr/sfw/bin/greadelf -SW /bin/ls 
        % dump -hv /bin/ls
    }
    
    {
      % mcs -p -n .shstrtab /bin/ls -> Looking at the Contents of Sections
      % gobjdump -s -j .rodata1 /bin/ls -> see non printable chars also
    }
    
    {
      % dis /bin/ls  -> disassembly file
    }
    
     % elfdump -sN.dynsym /bin/ls | fgrep .data -> Looking for Symbols Inside a Data Section
    
    
    Deleting or Extracting Sections of a Binary File
    -------------------------------------------------
    {
        % cc -g -o hello hello.c
        % cp hello hello-without-comment-and-debugline
        % mcs -d -n .comment -n .debug_line hello-without-comment-and-debugline
        % ls -l hello hello-without-comment-and-debugline
    
        % elfdump -N .text -w cat.text /bin/cat
        
        Determining the Size of Sections
        ---------------------------------
        {
          % elfdump -e /bin/ls | grep e_shoff
        }
    }
    
    Compiled instructions can be found in section .text
    
    2 categories: 
    {
          01-program data information.
          02-link-editing information. 
     }    

          01-program data information
          {
            its the portion of the binary that is meaningful only to the application, 
            and it consists of a number of sections, including compiled instructions and data to be initialized before the program starts. 
          }
          
          02-link-editing information.
          {
            Link-editing information contains several more sections, 
            including symbol 
            string tables 
            relocation information. 
            The link-editing information sections are interpreted by the linker to modify other sections.
          }
            
            
              .interp -> This is the pathname to the program interpreter, also known as the runtime linker, 
                          which interprets the information inside the binary, loads the program and initialized data into memory, 
                          and then starts the program.
                          
              .dynsym is the symbol table with global symbols for dynamic linkage, 
              .dynstr contains strings for the dynamic symbol table, and 
              .hash is a hash table to access entries inside the dynamic symbol table. 
              .SUNW_version contains version information for global symbols in the dynamic symbol table, .dynsym.
              .rel have relocation information for items to be relocated by the runtime linker.
                    rel.<em>x</em> on Intel platforms and on .rela.<em>x</em> on SPARC platforms
              the relocation sections are [
              .rela.data, 
              .rela.bss, 
              .rela.plt, all with the type .rela. These are relocations for the initialized data in .data, 
              the uninitialized data in .bss, and the procedure linkage table, .plt.
             
             .init contains initialization instructions to be executed before the program begins or—for objects loaded with lazy loading or 
              dlopen( )—before they execute. 
              The compiled program binary instructions are in .text. 
              The code in .fini is executed after the program finishes execution or when objects are unloaded.
              
              Read-only data is stored in .rodata and .rodata1. Data initialized before starting the program that will be both read and written 
              by the program at runtime is in .data and .data1. Space reserved for uninitialized read/write data is indicated by .bss. 
              The runtime linker allocates the space needed for .bss and fills it with zeros. Note that although .bss is the largest section 
              in /bin/ls, it takes up no space inside the binary file on disk, as indicated by the type NOBITS. 
              For this example, the .bss size = 0x8360 = 33,632 bytes.
              
              .dynamic contains a cache of information required by ld.so.1, including the starting address and size of the symbol, relocation, and string tables.

              .data and [18].data1 contain initialized program data, as mentioned earlier. Section [19].bss reserves space for uninitialized program data.

              .comment contains version information for system header files and compiler components.

              .shstrtab is a table of name strings for all sections. For this example, the first name string is .interp and the last is .SUNW_signature.

              .SUNW_signature contains a module verification signature used for security checking.

}

