operating system loader

heap
----
malloc(), calloc() or realloc() are stored on the heap
can create heaps on the fly/at will.
 
stack
-----
local variables are stored on the stack

.data seg
--------
global and static variables are stored in the data segment
globals are in a read-write section of the executable
The corresponding virtual address space of a program that contains 
initialized static variables, that is, global variables and static local variables
 

.code seg
--------
constants are stored in the code segment
constglobals may be in a read-only section


pointers
--------
Pointer are varibales 
if used malloc() then on heap
on the stack if they're local variables, 
or in the data section if they're global.

.rodata
Readonly data segment



.text : Code section, contains the program’s instructions - read only -.
.data : Generally used for writable data with some initialized non-zero content. Thus, the data section contains information that could be changed during application execution and this section must be copied for every instance.
.bss : Used for writable static data initialized to zero.
.rdata : Const / Read-only data of any kind are stored here.
.edata : Export directory, descriptors & handles
.idata : Import directory for handles & descriptors. It is used by executable files (exe's, dll’s etc.) to designate the imported and exported functions.
.rsrc : Section which holds information about various other resources needed by the executable, such as the icon that is shown when looking at the executable file in explore


----
The PE file format has a section where static data is stored, and that region of the file is memory mapped


Virtual memory - per memory -> is mapped with RAM and HDD
